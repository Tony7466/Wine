description: safer selection of the temporary directory for wineserver
author: Michael Gilbert <mgilbert@debian.org>
bug-debian: https://bugs.debian.org/903622
bug-debian: https://bugs.debian.org/904041
bug-upstream: https://bugs.winehq.org/show_bug.cgi?id=39013

--- a/tools/makedep.c
+++ b/tools/makedep.c
@@ -4154,6 +4154,7 @@ static void output_top_makefile( struct
     if (!found) output( "\n%s (everything below this line is auto-generated; DO NOT EDIT!!)\n", separator );
 
     output( "\n" );
+    output( "server/request.o dlls/ntdll/unix/server.o: include/wine/server_tmpdir.h\n" );
     output( "tools/wrc/ppl.l: tools/wrc/ppy.tab.c\n" );
     output( "tools/widl/ppl.l: tools/widl/ppy.tab.c\n" );
     output( "dlls/d3dcompiler_43/asmshader.l: dlls/d3dcompiler_43/asmshader.tab.c\n" );
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -1237,6 +1237,7 @@ int server_pipe( int fd[2] )
     return ret;
 }
 
+#include "wine/server_tmpdir.h"
 
 /***********************************************************************
  *           init_server_dir
@@ -1244,6 +1245,8 @@ int server_pipe( int fd[2] )
 static const char *init_server_dir( dev_t dev, ino_t ino )
 {
     char *dir = NULL;
+    char *tmp_dir = NULL;
+
     int p;
     char tmp[2 * sizeof(dev) + 2 * sizeof(ino) + 2];
 
@@ -1256,11 +1259,15 @@ static const char *init_server_dir( dev_
         snprintf( tmp + p, sizeof(tmp) - p, "%lx%08lx", (unsigned long)((unsigned long long)ino >> 32), (unsigned long)ino );
     else
         snprintf( tmp + p, sizeof(tmp) - p, "%lx", (unsigned long)ino );
-
 #ifdef __ANDROID__  /* there's no /tmp dir on Android */
     asprintf( &dir, "%s/.wineserver/server-%s", config_dir, tmp );
 #else
-    asprintf( &dir, "/tmp/.wine-%u/server-%s", getuid(), tmp );
+    tmp_dir = server_tmpdir( config_dir );
+    if (asprintf( &dir, "%s/server-%s", tmp_dir, tmp ) < 0)
+    {
+        fatal_error("error building temporary directory (client)\n");
+    }
+    free( tmp_dir );
 #endif
     return dir;
 }
--- a/server/request.c
+++ b/server/request.c
@@ -609,13 +609,18 @@ static void create_dir( const char *name
     if (st->st_mode & 077) fatal_error( "%s must not be accessible by other users\n", name );
 }
 
+#include <wine/server_tmpdir.h>
+
 /* create the server directory and chdir to it */
 static char *create_server_dir( int force )
 {
     const char *prefix = getenv( "WINEPREFIX" );
     char *p, *config_dir;
     struct stat st, st2;
-    size_t len = sizeof("/server-") + 2 * sizeof(st.st_dev) + 2 * sizeof(st.st_ino) + 2;
+
+    int q;
+    char *tmp_dir = NULL;
+    char tmp[2 * sizeof(st.st_dev) + 2 * sizeof(st.st_ino) + 2];
 
     /* open the configuration directory */
 
@@ -663,28 +668,27 @@ static char *create_server_dir( int forc
     strcpy( server_dir, config_dir );
     strcat( server_dir, "/.wineserver" );
 #else
-    len += sizeof("/tmp/.wine-") + 12;
-    if (!(server_dir = malloc( len ))) fatal_error( "out of memory\n" );
-    sprintf( server_dir, "/tmp/.wine-%u", getuid() );
+    tmp_dir = server_tmpdir( config_dir );
 #endif
-    create_dir( server_dir, &st2 );
+    create_dir( tmp_dir, &st2 );
 
     /* now create the server directory */
 
-    strcat( server_dir, "/server-" );
-    p = server_dir + strlen(server_dir);
-
     if (st.st_dev != (unsigned long)st.st_dev)
-        p += sprintf( p, "%lx%08lx-", (unsigned long)((unsigned long long)st.st_dev >> 32),
-                      (unsigned long)st.st_dev );
+        q = snprintf( tmp, sizeof(tmp), "%lx%08lx-", (unsigned long)((unsigned long long)st.st_dev >> 32), (unsigned long)st.st_dev );
     else
-        p += sprintf( p, "%lx-", (unsigned long)st.st_dev );
+        q = snprintf( tmp, sizeof(tmp), "%lx-", (unsigned long)st.st_dev );
 
     if (st.st_ino != (unsigned long)st.st_ino)
-        sprintf( p, "%lx%08lx", (unsigned long)((unsigned long long)st.st_ino >> 32),
-                 (unsigned long)st.st_ino );
+        snprintf( tmp + q, sizeof(tmp) - q, "%lx%08lx", (unsigned long)((unsigned long long)st.st_ino >> 32), (unsigned long)st.st_ino );
     else
-        sprintf( p, "%lx", (unsigned long)st.st_ino );
+        snprintf( tmp + q, sizeof(tmp) - q, "%lx", (unsigned long)st.st_ino );
+
+    if (asprintf( &server_dir, "%s/server-%s", tmp_dir, tmp ) < 0)
+    {
+        fatal_error("error building temporary directory (server)");
+    }
+    free( tmp_dir );
 
     create_dir( server_dir, &st );
 
--- /dev/null
+++ b/include/wine/server_tmpdir.h
@@ -0,0 +1,146 @@
+#ifndef __WINE_WINE_SERVER_TMPDIR_H
+#define __WINE_WINE_SERVER_TMPDIR_H
+
+#include <dirent.h>
+
+/***********************************************************************
+ *           server_tmpdir
+ */
+static inline char* server_tmpdir( const char* cfg_dir )
+{
+    char *tmp_dir = NULL;
+    char *run_dir = NULL;
+    const char *tmp_prefix = "/tmp";
+    const char *run_prefix = "/run/user";
+
+    /* use $run_prefix/$uid as wineserver's tmpdir if possible */
+    if (asprintf( &run_dir, "%s/%u", run_prefix, getuid() ) < 0)
+    {
+        fatal_error("error building run_dir\n");
+    }
+    if (opendir( run_dir ))
+    {
+        if (asprintf( &tmp_dir, "%s/wine", run_dir ) < 0)
+        {
+            fatal_error("error building temporary directory in /run/user\n");
+        }
+    }
+    free( run_dir );
+
+    /* otherwise, use a randomly named directory under TMPDIR */
+    if (!tmp_dir)
+    {
+        FILE *stream;
+        char *root_dir = NULL;
+        char *wineserver_file = NULL;
+        mode_t mode = S_IRUSR;
+
+        /* determine the temporary directory */
+        root_dir = secure_getenv("TMPDIR");
+        if (!root_dir)
+        {
+            if (asprintf( &root_dir, "%s", tmp_prefix ) < 0)
+            {
+                fatal_error("error building root_dir\n");
+            }
+        }
+
+        /* remove existing wineserver tmpdir file if permissions are wrong */
+        if (asprintf( &wineserver_file, "%s/wineserver", cfg_dir ) < 0)
+        {
+            fatal_error("error building wineserver_file\n");
+        }
+        if (access( wineserver_file, F_OK ) != -1)
+        {
+            struct stat statbuf;
+            mode_t mode_mask = S_IRWXU | S_IRWXG | S_IRWXO;
+            if (stat( wineserver_file, &statbuf ) != 0)
+            {
+                fatal_error("error reading wineserver tmpdir file permissions\n");
+            }
+            if ((statbuf.st_mode & mode_mask) != mode)
+            {
+                if (remove( wineserver_file ) != 0)
+                {
+                    fatal_error("error removing wineserver tmpdir file\n");
+                }
+            }
+        }
+
+        /* create or read the name of the directory */
+        stream = fopen( wineserver_file, "r" );
+        if (!stream)
+        {
+            int fd;
+            char *tmp_wine = NULL;
+
+            /* create a new randomized name for the directory */
+            if (asprintf( &tmp_wine, "%s/wine-XXXXXX", root_dir ) < 0)
+            {
+                fatal_error("error building tmp_wine/n");
+            }
+            tmp_dir = mkdtemp( tmp_wine );
+            if (!tmp_dir)
+            {
+                fatal_error("unable to create wineserver tmpdir\n");
+            }
+            if (tmp_dir != tmp_wine)
+            {
+                fatal_error("this condition is not handled\n");
+            }
+
+            /* save location of the chosen temporary directory */
+            fd = creat( wineserver_file, mode );
+            if (fd < 0)
+            {
+                fatal_error("error opening file descriptor for wineserver tmpdir file\n");
+            }
+            stream = fdopen( fd, "w" );
+            if (!stream)
+            {
+                fatal_error("error opening wineserver tmpdir file\n");
+            }
+            if (fputs( tmp_dir + strlen(root_dir) + 1, stream ) < 0)
+            {
+                fatal_error("error writing to wineserver tmpdir file\n");
+            }
+            if (fclose( stream ) != 0)
+            {
+                fatal_error("error closing wineserver tmpdir file\n");
+            }
+        }
+        else
+        {
+            char *tmp_wineserver = NULL;
+            size_t length = 0;
+            ssize_t nread;
+
+            /* try to read a previously generated wineserver tmpdir */
+            nread = getline( &tmp_wineserver, &length, stream );
+            if (fclose( stream ) != 0)
+            {
+                fatal_error("error closing wineserver tmpdir file\n");
+            }
+
+            /* if something went wrong, remove the broken file */
+            if (nread < 0)
+            {
+                remove( wineserver_file );
+                fatal_error("fixed a temporary directory error, please try running the same command again\n");
+            }
+
+            /* build the full path to the temporary directory */
+            if (asprintf( &tmp_dir, "%s/%s", root_dir, tmp_wineserver ) < 0)
+            {
+                fatal_error("error building temporary directory in /tmp\n");
+            }
+            free( tmp_wineserver );
+        }
+        free( root_dir );
+        free( wineserver_file );
+    }
+
+    return tmp_dir;
+}
+
+#endif

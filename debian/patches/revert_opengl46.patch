Description: Drop features requiring OpenGL 4.6.
 Revert "wined3d: Add ARB_texture_filter_anisotropic extension."
 Revert "winex11: Implement WGL_ARB_create_context_no_error."
 These features require a newer khronos-api in Debian.
Origin: https://source.winehq.org/git/wine.git/commitdiff/5b7a6d424eefb5261049f60473d6c94099a89722 (reverted),
 https://source.winehq.org/git/wine.git/commitdiff/3eaa23cbbf827247dccdeb6869f2f003a503fcda (reverted)
Forwarded: not-needed

--- a/dlls/wined3d/directx.c
+++ b/dlls/wined3d/directx.c
@@ -180,7 +180,6 @@ static const struct wined3d_extension_ma
     {"GL_ARB_texture_cube_map_array",       ARB_TEXTURE_CUBE_MAP_ARRAY    },
     {"GL_ARB_texture_env_combine",          ARB_TEXTURE_ENV_COMBINE       },
     {"GL_ARB_texture_env_dot3",             ARB_TEXTURE_ENV_DOT3          },
-    {"GL_ARB_texture_filter_anisotropic",   ARB_TEXTURE_FILTER_ANISOTROPIC},
     {"GL_ARB_texture_float",                ARB_TEXTURE_FLOAT             },
     {"GL_ARB_texture_gather",               ARB_TEXTURE_GATHER            },
     {"GL_ARB_texture_mirrored_repeat",      ARB_TEXTURE_MIRRORED_REPEAT   },
@@ -241,7 +240,7 @@ static const struct wined3d_extension_ma
     {"GL_EXT_texture_compression_s3tc",     EXT_TEXTURE_COMPRESSION_S3TC  },
     {"GL_EXT_texture_env_combine",          EXT_TEXTURE_ENV_COMBINE       },
     {"GL_EXT_texture_env_dot3",             EXT_TEXTURE_ENV_DOT3          },
-    {"GL_EXT_texture_filter_anisotropic",   ARB_TEXTURE_FILTER_ANISOTROPIC},
+    {"GL_EXT_texture_filter_anisotropic",   EXT_TEXTURE_FILTER_ANISOTROPIC},
     {"GL_EXT_texture_integer",              EXT_TEXTURE_INTEGER           },
     {"GL_EXT_texture_lod_bias",             EXT_TEXTURE_LOD_BIAS          },
     {"GL_EXT_texture_mirror_clamp",         EXT_TEXTURE_MIRROR_CLAMP      },
@@ -3626,9 +3625,9 @@ static void wined3d_adapter_init_limits(
         gl_info->limits.texture3d_size = gl_max;
         TRACE("Max texture3D size: %d.\n", gl_info->limits.texture3d_size);
     }
-    if (gl_info->supported[ARB_TEXTURE_FILTER_ANISOTROPIC])
+    if (gl_info->supported[EXT_TEXTURE_FILTER_ANISOTROPIC])
     {
-        gl_info->gl_ops.gl.p_glGetIntegerv(GL_MAX_TEXTURE_MAX_ANISOTROPY, &gl_max);
+        gl_info->gl_ops.gl.p_glGetIntegerv(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT, &gl_max);
         gl_info->limits.anisotropy = gl_max;
         TRACE("Max anisotropy: %d.\n", gl_info->limits.anisotropy);
     }
@@ -3955,7 +3954,6 @@ static BOOL wined3d_adapter_init_gl_caps
         {ARB_DERIVATIVE_CONTROL,           MAKEDWORD_VERSION(4, 5)},
 
         {ARB_PIPELINE_STATISTICS_QUERY,    MAKEDWORD_VERSION(4, 6)},
-        {ARB_TEXTURE_FILTER_ANISOTROPIC,   MAKEDWORD_VERSION(4, 6)},
     };
     struct wined3d_driver_info *driver_info = &adapter->driver_info;
     const char *gl_vendor_str, *gl_renderer_str, *gl_version_str;
@@ -5697,7 +5695,7 @@ HRESULT CDECL wined3d_get_device_caps(co
                                      WINED3DPRASTERCAPS_SLOPESCALEDEPTHBIAS |
                                      WINED3DPRASTERCAPS_DEPTHBIAS;
 
-    if (gl_info->supported[ARB_TEXTURE_FILTER_ANISOTROPIC])
+    if (gl_info->supported[EXT_TEXTURE_FILTER_ANISOTROPIC])
     {
         caps->RasterCaps  |= WINED3DPRASTERCAPS_ANISOTROPY    |
                              WINED3DPRASTERCAPS_ZBIAS         |
@@ -5816,7 +5814,7 @@ HRESULT CDECL wined3d_get_device_caps(co
                                WINED3DPTFILTERCAPS_MIPNEAREST       |
                                WINED3DPTFILTERCAPS_NEAREST;
 
-    if (gl_info->supported[ARB_TEXTURE_FILTER_ANISOTROPIC])
+    if (gl_info->supported[EXT_TEXTURE_FILTER_ANISOTROPIC])
     {
         caps->TextureFilterCaps  |= WINED3DPTFILTERCAPS_MAGFANISOTROPIC |
                                     WINED3DPTFILTERCAPS_MINFANISOTROPIC;
@@ -5837,7 +5835,7 @@ HRESULT CDECL wined3d_get_device_caps(co
                                        WINED3DPTFILTERCAPS_MIPNEAREST       |
                                        WINED3DPTFILTERCAPS_NEAREST;
 
-        if (gl_info->supported[ARB_TEXTURE_FILTER_ANISOTROPIC])
+        if (gl_info->supported[EXT_TEXTURE_FILTER_ANISOTROPIC])
         {
             caps->CubeTextureFilterCaps  |= WINED3DPTFILTERCAPS_MAGFANISOTROPIC |
                                             WINED3DPTFILTERCAPS_MINFANISOTROPIC;
--- a/dlls/wined3d/sampler.c
+++ b/dlls/wined3d/sampler.c
@@ -98,8 +98,8 @@ static void wined3d_sampler_cs_init(void
     GL_EXTCALL(glSamplerParameterf(sampler->name, GL_TEXTURE_LOD_BIAS, desc->lod_bias));
     GL_EXTCALL(glSamplerParameterf(sampler->name, GL_TEXTURE_MIN_LOD, desc->min_lod));
     GL_EXTCALL(glSamplerParameterf(sampler->name, GL_TEXTURE_MAX_LOD, desc->max_lod));
-    if (gl_info->supported[ARB_TEXTURE_FILTER_ANISOTROPIC])
-        GL_EXTCALL(glSamplerParameteri(sampler->name, GL_TEXTURE_MAX_ANISOTROPY, desc->max_anisotropy));
+    if (gl_info->supported[EXT_TEXTURE_FILTER_ANISOTROPIC])
+        GL_EXTCALL(glSamplerParameteri(sampler->name, GL_TEXTURE_MAX_ANISOTROPY_EXT, desc->max_anisotropy));
     if (desc->compare)
         GL_EXTCALL(glSamplerParameteri(sampler->name, GL_TEXTURE_COMPARE_MODE, GL_COMPARE_R_TO_TEXTURE));
     GL_EXTCALL(glSamplerParameteri(sampler->name, GL_TEXTURE_COMPARE_FUNC,
--- a/dlls/wined3d/texture.c
+++ b/dlls/wined3d/texture.c
@@ -1006,8 +1006,8 @@ void wined3d_texture_apply_sampler_desc(
     state = sampler_desc->max_anisotropy;
     if (state != gl_tex->sampler_desc.max_anisotropy)
     {
-        if (gl_info->supported[ARB_TEXTURE_FILTER_ANISOTROPIC])
-            gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_MAX_ANISOTROPY, state);
+        if (gl_info->supported[EXT_TEXTURE_FILTER_ANISOTROPIC])
+            gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, state);
         else
             WARN("Anisotropic filtering not supported.\n");
         gl_tex->sampler_desc.max_anisotropy = state;
--- a/dlls/wined3d/wined3d_gl.h
+++ b/dlls/wined3d/wined3d_gl.h
@@ -113,7 +113,6 @@ enum wined3d_gl_extension
     ARB_TEXTURE_CUBE_MAP_ARRAY,
     ARB_TEXTURE_ENV_COMBINE,
     ARB_TEXTURE_ENV_DOT3,
-    ARB_TEXTURE_FILTER_ANISOTROPIC,
     ARB_TEXTURE_FLOAT,
     ARB_TEXTURE_GATHER,
     ARB_TEXTURE_MIRRORED_REPEAT,
@@ -172,6 +171,7 @@ enum wined3d_gl_extension
     EXT_TEXTURE_COMPRESSION_S3TC,
     EXT_TEXTURE_ENV_COMBINE,
     EXT_TEXTURE_ENV_DOT3,
+    EXT_TEXTURE_FILTER_ANISOTROPIC,
     EXT_TEXTURE_INTEGER,
     EXT_TEXTURE_LOD_BIAS,
     EXT_TEXTURE_MIRROR_CLAMP,
--- a/dlls/opengl32/make_opengl
+++ b/dlls/opengl32/make_opengl
@@ -362,7 +362,6 @@ my %remapped_wgl_functions =
 my %supported_wgl_extensions =
    (
     "WGL_ARB_create_context" => 1,
-    "WGL_ARB_create_context_no_error" => 1,
     "WGL_ARB_create_context_profile" => 1,
     "WGL_ARB_extensions_string" => 1,
     "WGL_ARB_make_current_read" => 1,
--- a/dlls/winex11.drv/opengl.c
+++ b/dlls/winex11.drv/opengl.c
@@ -163,8 +163,6 @@ typedef XID GLXPbuffer;
 #define GLX_CONTEXT_MAJOR_VERSION_ARB     0x2091
 #define GLX_CONTEXT_MINOR_VERSION_ARB     0x2092
 #define GLX_CONTEXT_FLAGS_ARB             0x2094
-/** GLX_ARB_create_context_no_error */
-#define GLX_CONTEXT_OPENGL_NO_ERROR_ARB   0x31B3
 /** GLX_ARB_create_context_profile */
 #define GLX_CONTEXT_PROFILE_MASK_ARB      0x9126
 /** GLX_ATI_pixel_format_float */
@@ -2077,12 +2075,6 @@ static struct wgl_context *X11DRV_wglCre
                     pContextAttribList[1] = attribList[1];
                     pContextAttribList += 2;
                     ret->numAttribs++;
-                    break;
-                case WGL_CONTEXT_OPENGL_NO_ERROR_ARB:
-                    pContextAttribList[0] = GLX_CONTEXT_OPENGL_NO_ERROR_ARB;
-                    pContextAttribList[1] = attribList[1];
-                    pContextAttribList += 2;
-                    ret->numAttribs++;
                     break;
                 case WGL_CONTEXT_PROFILE_MASK_ARB:
                     pContextAttribList[0] = GLX_CONTEXT_PROFILE_MASK_ARB;

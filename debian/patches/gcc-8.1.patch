description: Add DECLSPEC_HOTPATCH to some patched functions.
origin: upstream, commits wine-3.17-40-g72c2af3868, wine-3.16-96-gb917cc66f4,
 wine-3.16-66-g1e8c62b020, wine-3.16-65-gbca3ec9fd9, wine-3.16-64-gb8b946dd0f
bug-debian: https://bugs.debian.org/908021
bug: https://bugs.winehq.org/show_bug.cgi?id=45199

--- a/dlls/kernel32/virtual.c
+++ b/dlls/kernel32/virtual.c
@@ -574,7 +574,7 @@ LPVOID WINAPI MapViewOfFileEx( HANDLE ha
  *	Failure: FALSE.
  *
  */
-BOOL WINAPI UnmapViewOfFile( LPCVOID addr )
+BOOL WINAPI DECLSPEC_HOTPATCH UnmapViewOfFile( const void *addr )
 {
     NTSTATUS status;
 
--- a/dlls/msvcrt/heap.c
+++ b/dlls/msvcrt/heap.c
@@ -21,6 +21,7 @@
  *       handler and non atomic heap operations
  */
 
+#include "config.h"
 #include "msvcrt.h"
 #include "mtdll.h"
 #include "wine/debug.h"
@@ -127,7 +128,7 @@ static MSVCRT_size_t msvcrt_heap_size(vo
 /*********************************************************************
  *		??2@YAPAXI@Z (MSVCRT.@)
  */
-void* CDECL MSVCRT_operator_new(MSVCRT_size_t size)
+void* CDECL DECLSPEC_HOTPATCH MSVCRT_operator_new(MSVCRT_size_t size)
 {
   void *retval;
   int freed;
@@ -169,7 +170,7 @@ void* CDECL MSVCRT_operator_new_dbg(MSVC
 /*********************************************************************
  *		??3@YAXPAX@Z (MSVCRT.@)
  */
-void CDECL MSVCRT_operator_delete(void *mem)
+void CDECL DECLSPEC_HOTPATCH MSVCRT_operator_delete(void *mem)
 {
   TRACE("(%p)\n", mem);
   msvcrt_heap_free(mem);
@@ -394,7 +395,7 @@ size_t CDECL _aligned_msize(void *p, MSV
 /*********************************************************************
  *		calloc (MSVCRT.@)
  */
-void* CDECL MSVCRT_calloc(MSVCRT_size_t count, MSVCRT_size_t size)
+void* CDECL DECLSPEC_HOTPATCH MSVCRT_calloc(MSVCRT_size_t count, MSVCRT_size_t size)
 {
   MSVCRT_size_t bytes = count*size;
 
@@ -420,7 +421,7 @@ void* CDECL _calloc_base(MSVCRT_size_t c
 /*********************************************************************
  *		free (MSVCRT.@)
  */
-void CDECL MSVCRT_free(void* ptr)
+void CDECL DECLSPEC_HOTPATCH MSVCRT_free(void* ptr)
 {
   msvcrt_heap_free(ptr);
 }
@@ -459,7 +460,7 @@ void* CDECL _malloc_base(MSVCRT_size_t s
 /*********************************************************************
  *		realloc (MSVCRT.@)
  */
-void* CDECL MSVCRT_realloc(void* ptr, MSVCRT_size_t size)
+void* CDECL DECLSPEC_HOTPATCH MSVCRT_realloc(void* ptr, MSVCRT_size_t size)
 {
   if (!ptr) return MSVCRT_malloc(size);
   if (size) return msvcrt_heap_realloc(0, ptr, size);
--- a/dlls/ntdll/heap.c
+++ b/dlls/ntdll/heap.c
@@ -1662,7 +1662,7 @@ HANDLE WINAPI RtlDestroyHeap( HANDLE hea
  * NOTES
  *  This call does not SetLastError().
  */
-PVOID WINAPI RtlAllocateHeap( HANDLE heap, ULONG flags, SIZE_T size )
+void * WINAPI DECLSPEC_HOTPATCH RtlAllocateHeap( HANDLE heap, ULONG flags, SIZE_T size )
 {
     ARENA_FREE *pArena;
     ARENA_INUSE *pInUse;
@@ -1747,7 +1747,7 @@ PVOID WINAPI RtlAllocateHeap( HANDLE hea
  *  Success: TRUE, if ptr is NULL or was freed successfully.
  *  Failure: FALSE.
  */
-BOOLEAN WINAPI RtlFreeHeap( HANDLE heap, ULONG flags, PVOID ptr )
+BOOLEAN WINAPI DECLSPEC_HOTPATCH RtlFreeHeap( HANDLE heap, ULONG flags, void *ptr )
 {
     ARENA_INUSE *pInUse;
     SUBHEAP *subheap;
--- a/dlls/oleaut32/oleaut.c
+++ b/dlls/oleaut32/oleaut.c
@@ -272,7 +272,7 @@ static inline IMalloc *get_malloc(void)
  *  See BSTR.
  *  str may be NULL, in which case this function does nothing.
  */
-void WINAPI SysFreeString(BSTR str)
+void WINAPI DECLSPEC_HOTPATCH SysFreeString(BSTR str)
 {
     bstr_cache_entry_t *cache_entry;
     bstr_t *bstr;
@@ -429,7 +429,7 @@ int WINAPI SysReAllocStringLen(BSTR* old
  *  without checking for a terminating NUL.
  *  See BSTR.
  */
-BSTR WINAPI SysAllocStringByteLen(LPCSTR str, UINT len)
+BSTR WINAPI DECLSPEC_HOTPATCH SysAllocStringByteLen(LPCSTR str, UINT len)
 {
     bstr_t *bstr;
 
--- a/dlls/oleaut32/variant.c
+++ b/dlls/oleaut32/variant.c
@@ -648,7 +648,7 @@ HRESULT VARIANT_ClearInd(VARIANTARG *pVa
  *  Success: S_OK. Any previous value in pVarg is freed and its type is set to VT_EMPTY.
  *  Failure: DISP_E_BADVARTYPE, if the variant is not a valid variant type.
  */
-HRESULT WINAPI VariantClear(VARIANTARG* pVarg)
+HRESULT WINAPI DECLSPEC_HOTPATCH VariantClear(VARIANTARG* pVarg)
 {
   HRESULT hres;
 
@@ -962,8 +962,8 @@ VariantCopyInd_Return:
  *  The LCID used for the conversion is LOCALE_USER_DEFAULT.
  *  See VariantChangeTypeEx.
  */
-HRESULT WINAPI VariantChangeType(VARIANTARG* pvargDest, VARIANTARG* pvargSrc,
-                                 USHORT wFlags, VARTYPE vt)
+HRESULT WINAPI DECLSPEC_HOTPATCH VariantChangeType(VARIANTARG* pvargDest, VARIANTARG* pvargSrc,
+                                                   USHORT wFlags, VARTYPE vt)
 {
   return VariantChangeTypeEx( pvargDest, pvargSrc, LOCALE_USER_DEFAULT, wFlags, vt );
 }

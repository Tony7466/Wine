description: fix operations that potentially overflow (gcc -Wstringop-overflow)
author: Michael Gilbert <mgilbert@debian.org>

--- a/dlls/ddraw/device.c
+++ b/dlls/ddraw/device.c
@@ -4685,7 +4685,7 @@ static HRESULT WINAPI d3d_device3_Comput
         D3DVECTOR *centers, D3DVALUE *radii, DWORD sphere_count, DWORD flags, DWORD *return_values)
 {
     static const DWORD enabled_planes = 0x3f;
-    struct wined3d_vec4 plane[6];
+    struct wined3d_vec4 plane[12];
     unsigned int i, j;
 
     TRACE("iface %p, centers %p, radii %p, sphere_count %lu, flags %#lx, return_values %p.\n",
--- a/dlls/glu32/project.c
+++ b/dlls/glu32/project.c
@@ -37,20 +37,20 @@
 /*
 ** Make m an identity matrix
 */
-static void __gluMakeIdentityd(GLdouble m[16])
+static void __gluMakeIdentityd(GLdouble m[4][4])
 {
-    m[0+4*0] = 1; m[0+4*1] = 0; m[0+4*2] = 0; m[0+4*3] = 0;
-    m[1+4*0] = 0; m[1+4*1] = 1; m[1+4*2] = 0; m[1+4*3] = 0;
-    m[2+4*0] = 0; m[2+4*1] = 0; m[2+4*2] = 1; m[2+4*3] = 0;
-    m[3+4*0] = 0; m[3+4*1] = 0; m[3+4*2] = 0; m[3+4*3] = 1;
+    m[0][0] = 1; m[0][1] = 0; m[0][2] = 0; m[0][3] = 0;
+    m[1][0] = 0; m[1][1] = 1; m[1][2] = 0; m[1][3] = 0;
+    m[2][0] = 0; m[2][1] = 0; m[2][2] = 1; m[2][3] = 0;
+    m[3][0] = 0; m[3][1] = 0; m[3][2] = 0; m[3][3] = 1;
 }
 
-static void __gluMakeIdentityf(GLfloat m[16])
+static void __gluMakeIdentityf(GLfloat m[4][4])
 {
-    m[0+4*0] = 1; m[0+4*1] = 0; m[0+4*2] = 0; m[0+4*3] = 0;
-    m[1+4*0] = 0; m[1+4*1] = 1; m[1+4*2] = 0; m[1+4*3] = 0;
-    m[2+4*0] = 0; m[2+4*1] = 0; m[2+4*2] = 1; m[2+4*3] = 0;
-    m[3+4*0] = 0; m[3+4*1] = 0; m[3+4*2] = 0; m[3+4*3] = 1;
+    m[0][0] = 1; m[0][1] = 0; m[0][2] = 0; m[0][3] = 0;
+    m[1][0] = 0; m[1][1] = 1; m[1][2] = 0; m[1][3] = 0;
+    m[2][0] = 0; m[2][1] = 0; m[2][2] = 1; m[2][3] = 0;
+    m[3][0] = 0; m[3][1] = 0; m[3][2] = 0; m[3][3] = 1;
 }
 
 /***********************************************************************
@@ -77,7 +77,7 @@ void WINAPI gluPerspective( GLdouble fov
     }
     cotangent = cos(radians) / sine;
 
-    __gluMakeIdentityd(&m[0][0]);
+    __gluMakeIdentityd(m);
     m[0][0] = cotangent / aspect;
     m[1][1] = cotangent;
     m[2][2] = -(zFar + zNear) / deltaZ;
@@ -133,7 +133,7 @@ void WINAPI gluLookAt( GLdouble eyex, GL
     /* Recompute up as: up = side x forward */
     cross(side, forward, up);
 
-    __gluMakeIdentityf(&m[0][0]);
+    __gluMakeIdentityf(m);
     m[0][0] = side[0];
     m[1][0] = side[1];
     m[2][0] = side[2];
--- a/dlls/win32u/message.c
+++ b/dlls/win32u/message.c
@@ -24,6 +24,7 @@
 #pragma makedep unix
 #endif
 
+#include <limits.h>
 #include <assert.h>
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
@@ -332,16 +333,20 @@ static BOOL unpack_message( HWND hwnd, U
     {
     case WM_WINE_SETWINDOWPOS:
     {
-        WINDOWPOS wp;
+        SIZE_T hwnd_max = UINT_MAX;
+
+        HWND hwnd;
+        HWND hwnd_after;
         if (size < sizeof(ps->wp)) return FALSE;
-        wp.hwnd            = wine_server_ptr_handle( ps->wp.hwnd );
-        wp.hwndInsertAfter = wine_server_ptr_handle( ps->wp.hwndInsertAfter );
-        wp.x               = ps->wp.x;
-        wp.y               = ps->wp.y;
-        wp.cx              = ps->wp.cx;
-        wp.cy              = ps->wp.cy;
-        wp.flags           = ps->wp.flags;
-        memcpy( &ps->wp, &wp, sizeof(wp) );
+        hwnd       = wine_server_ptr_handle( ps->wp.hwnd );
+        hwnd_after = wine_server_ptr_handle( ps->wp.hwndInsertAfter );
+        if ((SIZE_T)hwnd > hwnd_max || (SIZE_T)hwnd_after > hwnd_max)
+        {
+            ERR("Got window handle larger than UINT on this hardware\n");
+            exit(-1);
+        }
+        memcpy( &(ps->wp.hwnd), hwnd, sizeof(UINT) );
+        memcpy( &(ps->wp.hwndInsertAfter), hwnd_after, sizeof(UINT) );
         break;
     }
     case WM_WINE_KEYBOARD_LL_HOOK:

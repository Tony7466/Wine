description: fix pointer conversion warnings in setupapi on 64 bit archs
author: Michael Gilbert <mgilbert@debian.org>

--- a/dlls/setupapi/devinst.c
+++ b/dlls/setupapi/devinst.c
@@ -135,7 +135,11 @@ struct DeviceInfo
     struct DeviceInfoSet *set;
     HKEY                  key;
     BOOL                  phantom;
+#if defined(__x86_64__) || defined (__aarch64__)
+    DWORD64               devId;
+#else
     DWORD                 devId;
+#endif
     LPWSTR                instanceId;
     struct list           interfaces;
 };
@@ -468,7 +472,11 @@ static struct DeviceInfo *SETUPDI_Alloca
     if (devInfo)
     {
         devInfo->set = set;
+#if defined(__x86_64__) || defined (__aarch64__)
+        devInfo->devId = (DWORD64)devInst;
+#else
         devInfo->devId = (DWORD)devInst;
+#endif
 
         devInfo->instanceId = HeapAlloc(GetProcessHeap(), 0,
                 (lstrlenW(instanceId) + 1) * sizeof(WCHAR));
@@ -3092,9 +3100,15 @@ BOOL WINAPI SetupDiGetDeviceRegistryProp
     struct DeviceInfoSet *set = DeviceInfoSet;
     struct DeviceInfo *devInfo;
 
+#if defined(__x86_64__) || defined (__aarch64__)
+    TRACE("%04lx %p %d %p %p %d %p\n", (DWORD64)DeviceInfoSet, DeviceInfoData,
+        Property, PropertyRegDataType, PropertyBuffer, PropertyBufferSize,
+        RequiredSize);
+#else
     TRACE("%04x %p %d %p %p %d %p\n", (DWORD)DeviceInfoSet, DeviceInfoData,
         Property, PropertyRegDataType, PropertyBuffer, PropertyBufferSize,
         RequiredSize);
+#endif
 
     if (!DeviceInfoSet || DeviceInfoSet == INVALID_HANDLE_VALUE)
     {
@@ -3155,9 +3169,15 @@ BOOL WINAPI SetupDiGetDeviceRegistryProp
     struct DeviceInfoSet *set = DeviceInfoSet;
     struct DeviceInfo *devInfo;
 
+#if defined(__x86_64__) || defined (__aarch64__)
+    TRACE("%04lx %p %d %p %p %d %p\n", (DWORD64)DeviceInfoSet, DeviceInfoData,
+        Property, PropertyRegDataType, PropertyBuffer, PropertyBufferSize,
+        RequiredSize);
+#else
     TRACE("%04x %p %d %p %p %d %p\n", (DWORD)DeviceInfoSet, DeviceInfoData,
         Property, PropertyRegDataType, PropertyBuffer, PropertyBufferSize,
         RequiredSize);
+#endif
 
     if (!DeviceInfoSet || DeviceInfoSet == INVALID_HANDLE_VALUE)
     {
@@ -3984,7 +4004,11 @@ CONFIGRET WINAPI CM_Get_Device_IDA( DEVI
 {
     struct DeviceInfo *devInfo = GlobalLock((HANDLE)dnDevInst);
 
+#if defined(__x86_64__) || defined (__aarch64__)
+    TRACE("%lx->%p, %p, %u %u\n", dnDevInst, devInfo, Buffer, BufferLen, ulFlags);
+#else
     TRACE("%x->%p, %p, %u %u\n", dnDevInst, devInfo, Buffer, BufferLen, ulFlags);
+#endif
 
     if (!devInfo)
         return CR_NO_SUCH_DEVINST;
@@ -4002,11 +4026,19 @@ CONFIGRET WINAPI CM_Get_Device_IDW( DEVI
 {
     struct DeviceInfo *devInfo = GlobalLock((HANDLE)dnDevInst);
 
+#if defined(__x86_64__) || defined (__aarch64__)
+    TRACE("%lx->%p, %p, %u %u\n", dnDevInst, devInfo, Buffer, BufferLen, ulFlags);
+#else
     TRACE("%x->%p, %p, %u %u\n", dnDevInst, devInfo, Buffer, BufferLen, ulFlags);
+#endif
 
     if (!devInfo)
     {
+#if defined(__x86_64__) || defined (__aarch64__)
+        WARN("dev instance %ld not found!\n", dnDevInst);
+#else
         WARN("dev instance %d not found!\n", dnDevInst);
+#endif
         return CR_NO_SUCH_DEVINST;
     }
 
@@ -4026,11 +4058,19 @@ CONFIGRET WINAPI CM_Get_Device_ID_Size(
 {
     struct DeviceInfo *ppdevInfo = GlobalLock((HANDLE)dnDevInst);
 
+#if defined(__x86_64__) || defined (__aarch64__)
+    TRACE("%lx->%p, %p, %u\n", dnDevInst, ppdevInfo, pulLen, ulFlags);
+#else
     TRACE("%x->%p, %p, %u\n", dnDevInst, ppdevInfo, pulLen, ulFlags);
+#endif
 
     if (!ppdevInfo)
     {
+#if defined(__x86_64__) || defined (__aarch64__)
+        WARN("dev instance %ld not found!\n", dnDevInst);
+#else
         WARN("dev instance %d not found!\n", dnDevInst);
+#endif
         return CR_NO_SUCH_DEVINST;
     }
 
--- a/include/setupapi.h
+++ b/include/setupapi.h
@@ -600,7 +600,11 @@ typedef struct _SP_DEVINFO_DATA
 {
    DWORD     cbSize;
    GUID      ClassGuid;
+#if defined(__x86_64__) || defined (__aarch64__)
+   DWORD64   DevInst;   /* DEVINST handle */
+#else
    DWORD     DevInst;   /* DEVINST handle */
+#endif
    ULONG_PTR Reserved;
 } SP_DEVINFO_DATA, *PSP_DEVINFO_DATA;
 
--- a/include/cfgmgr32.h
+++ b/include/cfgmgr32.h
@@ -168,7 +168,11 @@ typedef DWORD CONFIGRET;
 #define CM_REGISTRY_USER                0x0100
 #define CM_REGISTRY_CONFIG              0x0200
 
+#if defined(__x86_64__) || defined (__aarch64__)
+typedef DWORD64 DEVINST, *PDEVINST;
+#else
 typedef DWORD DEVINST, *PDEVINST;
+#endif
 typedef DWORD DEVNODE, *PDEVNODE;
 typedef HANDLE HMACHINE, *PHMACHINE;
 typedef CHAR *DEVNODEID_A, *DEVINSTID_A;
--- a/dlls/setupapi/stubs.c
+++ b/dlls/setupapi/stubs.c
@@ -55,7 +55,11 @@ CONFIGRET WINAPI CM_Connect_MachineW(PCW
  */
 CONFIGRET WINAPI CM_Create_DevNodeA(PDEVINST pdnDevInst, DEVINSTID_A pDeviceID, DEVINST dnParent, ULONG ulFlags)
 {
+#if defined(__x86_64__) || defined (__aarch64__)
+  FIXME("(%p %s 0x%08lx 0x%08x) stub\n", pdnDevInst, pDeviceID, dnParent, ulFlags);
+#else
   FIXME("(%p %s 0x%08x 0x%08x) stub\n", pdnDevInst, pDeviceID, dnParent, ulFlags);
+#endif
   return CR_SUCCESS;
 }
 
@@ -64,7 +68,11 @@ CONFIGRET WINAPI CM_Create_DevNodeA(PDEV
  */
 CONFIGRET WINAPI CM_Create_DevNodeW(PDEVINST pdnDevInst, DEVINSTID_W pDeviceID, DEVINST dnParent, ULONG ulFlags)
 {
+#if defined(__x86_64__) || defined (__aarch64__)
+  FIXME("(%p %s 0x%08lx 0x%08x) stub\n", pdnDevInst, debugstr_w(pDeviceID), dnParent, ulFlags);
+#else
   FIXME("(%p %s 0x%08x 0x%08x) stub\n", pdnDevInst, debugstr_w(pDeviceID), dnParent, ulFlags);
+#endif
   return CR_SUCCESS;
 }
 
@@ -85,7 +93,11 @@ CONFIGRET WINAPI CM_Open_DevNode_Key(
     DEVINST dnDevInst, REGSAM access, ULONG ulHardwareProfile, REGDISPOSITION disposition,
     PHKEY phkDevice, ULONG ulFlags)
 {
+#if defined(__x86_64__) || defined (__aarch64__)
+    FIXME("0x%08lx 0x%08x 0x%08x 0x%08x %p 0x%08x : stub\n", dnDevInst, access, ulHardwareProfile,
+#else
     FIXME("0x%08x 0x%08x 0x%08x 0x%08x %p 0x%08x : stub\n", dnDevInst, access, ulHardwareProfile,
+#endif
           disposition, phkDevice, ulFlags);
     return CR_SUCCESS;
 }
@@ -96,7 +108,11 @@ CONFIGRET WINAPI CM_Open_DevNode_Key(
 CONFIGRET WINAPI CM_Get_Child(
     PDEVINST pdnDevInst, DEVINST dnDevInst, ULONG ulFlags)
 {
+#if defined(__x86_64__) || defined (__aarch64__)
+    FIXME("%p 0x%08lx 0x%08x: stub\n", pdnDevInst, dnDevInst, ulFlags);
+#else
     FIXME("%p 0x%08x 0x%08x: stub\n", pdnDevInst, dnDevInst, ulFlags);
+#endif
     return CR_SUCCESS;
 }
 
@@ -106,7 +122,11 @@ CONFIGRET WINAPI CM_Get_Child(
 CONFIGRET WINAPI CM_Get_Child_Ex(
     PDEVINST pdnDevInst, DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine)
 {
+#if defined(__x86_64__) || defined (__aarch64__)
+    FIXME("%p 0x%08lx 0x%08x %p: stub\n", pdnDevInst, dnDevInst, ulFlags, hMachine);
+#else
     FIXME("%p 0x%08x 0x%08x %p: stub\n", pdnDevInst, dnDevInst, ulFlags, hMachine);
+#endif
     return CR_SUCCESS;
 }
 
@@ -116,7 +136,11 @@ CONFIGRET WINAPI CM_Get_Child_Ex(
 DWORD WINAPI CM_Get_Device_ID_ExA(
     DEVINST dnDevInst, PCHAR Buffer, ULONG BufferLen, ULONG ulFlags, HMACHINE hMachine)
 {
+#if defined(__x86_64__) || defined (__aarch64__)
+    FIXME("0x%08lx %p 0x%08x 0x%08x %p: stub\n", dnDevInst, Buffer, BufferLen, ulFlags, hMachine);
+#else
     FIXME("0x%08x %p 0x%08x 0x%08x %p: stub\n", dnDevInst, Buffer, BufferLen, ulFlags, hMachine);
+#endif
     return CR_SUCCESS;
 }
 
@@ -126,7 +150,11 @@ DWORD WINAPI CM_Get_Device_ID_ExA(
 DWORD WINAPI CM_Get_Device_ID_ExW(
     DEVINST dnDevInst, PWCHAR Buffer, ULONG BufferLen, ULONG ulFlags, HMACHINE hMachine)
 {
+#if defined(__x86_64__) || defined (__aarch64__)
+    FIXME("0x%08lx %p 0x%08x 0x%08x %p: stub\n", dnDevInst, Buffer, BufferLen, ulFlags, hMachine);
+#else
     FIXME("0x%08x %p 0x%08x 0x%08x %p: stub\n", dnDevInst, Buffer, BufferLen, ulFlags, hMachine);
+#endif
     return CR_SUCCESS;
 }
 
@@ -179,7 +207,11 @@ CONFIGRET WINAPI CM_Get_Device_ID_List_S
  */
 DWORD WINAPI CM_Get_Parent(PDEVINST pdnDevInst, DEVINST dnDevInst, ULONG ulFlags)
 {
+#if defined(__x86_64__) || defined (__aarch64__)
+    FIXME("%p 0x%08lx 0x%08x stub\n", pdnDevInst, dnDevInst, ulFlags);
+#else
     FIXME("%p 0x%08x 0x%08x stub\n", pdnDevInst, dnDevInst, ulFlags);
+#endif
     if(pdnDevInst)
         *pdnDevInst = 0;
     return CR_NO_SUCH_DEVNODE;
@@ -419,7 +451,11 @@ CONFIGRET WINAPI CM_Get_Device_Interface
 CONFIGRET WINAPI CM_Get_DevNode_Registry_Property_ExA(DEVINST dev, ULONG prop, PULONG regdatatype,
     PVOID buf, PULONG len, ULONG flags, HMACHINE machine)
 {
+#if defined(__x86_64__) || defined (__aarch64__)
+    FIXME("0x%08lx %u %p %p %p 0x%08x %p: stub\n", dev, prop, regdatatype, buf, len, flags, machine);
+#else
     FIXME("0x%08x %u %p %p %p 0x%08x %p: stub\n", dev, prop, regdatatype, buf, len, flags, machine);
+#endif
     return CR_FAILURE;
 }
 
@@ -429,7 +465,11 @@ CONFIGRET WINAPI CM_Get_DevNode_Registry
 CONFIGRET WINAPI CM_Get_DevNode_Registry_Property_ExW(DEVINST dev, ULONG prop, PULONG regdatatype,
     PVOID buf, PULONG len, ULONG flags, HMACHINE machine)
 {
+#if defined(__x86_64__) || defined (__aarch64__)
+    FIXME("0x%08lx %u %p %p %p 0x%08x %p: stub\n", dev, prop, regdatatype, buf, len, flags, machine);
+#else
     FIXME("0x%08x %u %p %p %p 0x%08x %p: stub\n", dev, prop, regdatatype, buf, len, flags, machine);
+#endif
     return CR_FAILURE;
 }
 
@@ -457,7 +497,11 @@ CONFIGRET WINAPI CM_Get_DevNode_Registry
 CONFIGRET WINAPI CM_Get_DevNode_Status(ULONG *status, ULONG *problem, DEVINST dev,
                                        ULONG flags)
 {
+#if defined(__x86_64__) || defined (__aarch64__)
+    FIXME("%p %p 0x%08lx 0x%08x: stub\n", status, problem, dev, flags);
+#else
     FIXME("%p %p 0x%08x 0x%08x: stub\n", status, problem, dev, flags);
+#endif
     return CR_FAILURE;
 }
 
@@ -467,7 +511,11 @@ CONFIGRET WINAPI CM_Get_DevNode_Status(U
 CONFIGRET WINAPI CM_Get_DevNode_Status_Ex(ULONG *status, ULONG *problem, DEVINST dev,
                                           ULONG flags, HMACHINE machine)
 {
+#if defined(__x86_64__) || defined (__aarch64__)
+    FIXME("%p %p 0x%08lx 0x%08x %p: stub\n", status, problem, dev, flags, machine);
+#else
     FIXME("%p %p 0x%08x 0x%08x %p: stub\n", status, problem, dev, flags, machine);
+#endif
     return CR_FAILURE;
 }
 
@@ -506,19 +554,31 @@ CONFIGRET WINAPI CM_Get_Class_Registry_P
 CONFIGRET WINAPI CM_Get_Sibling_Ex(
     PDEVINST pdnDevInst, DEVINST DevInst, ULONG ulFlags, HMACHINE hMachine)
 {
+#if defined(__x86_64__) || defined (__aarch64__)
+    FIXME("%p 0x%08lx 0x%08x %p: stub\n", pdnDevInst, DevInst, ulFlags, hMachine);
+#else
     FIXME("%p 0x%08x 0x%08x %p: stub\n", pdnDevInst, DevInst, ulFlags, hMachine);
+#endif
     return CR_FAILURE;
 }
 
 CONFIGRET WINAPI CM_Reenumerate_DevNode(DEVINST dnDevInst, ULONG ulFlags)
 {
+#if defined(__x86_64__) || defined (__aarch64__)
+    FIXME("0x%08lx 0x%08x: stub\n", dnDevInst, ulFlags);
+#else
     FIXME("0x%08x 0x%08x: stub\n", dnDevInst, ulFlags);
+#endif
     return CR_FAILURE;
 }
 
 CONFIGRET WINAPI CM_Reenumerate_DevNode_Ex(DEVINST dnDevInst, ULONG ulFlags, HMACHINE machine)
 {
+#if defined(__x86_64__) || defined (__aarch64__)
+    FIXME("0x%08lx 0x%08x %p: stub\n", dnDevInst, ulFlags, machine);
+#else
     FIXME("0x%08x 0x%08x %p: stub\n", dnDevInst, ulFlags, machine);
+#endif
     return CR_FAILURE;
 }
 

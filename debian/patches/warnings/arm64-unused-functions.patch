description: disable functions that are unused on arm64
author: Michael Gilbert <mgilbert@debian.org>

--- a/dlls/dmime/audiopath.c
+++ b/dlls/dmime/audiopath.c
@@ -39,10 +39,12 @@ static inline struct IDirectMusicAudioPa
     return CONTAINING_RECORD(iface, struct IDirectMusicAudioPathImpl, IDirectMusicAudioPath_iface);
 }
 
+#ifndef __aarch64__
 static inline struct IDirectMusicAudioPathImpl *impl_from_IDirectMusicObject(IDirectMusicObject *iface)
 {
     return CONTAINING_RECORD(iface, struct IDirectMusicAudioPathImpl, dmobj.IDirectMusicObject_iface);
 }
+#endif
 
 static inline struct IDirectMusicAudioPathImpl *impl_from_IPersistStream(IPersistStream *iface)
 {
--- a/dlls/dmime/graph.c
+++ b/dlls/dmime/graph.c
@@ -35,10 +35,12 @@ static inline IDirectMusicGraphImpl *imp
     return CONTAINING_RECORD(iface, IDirectMusicGraphImpl, IDirectMusicGraph_iface);
 }
 
+#ifndef __aarch64__
 static inline IDirectMusicGraphImpl *impl_from_IDirectMusicObject(IDirectMusicObject *iface)
 {
     return CONTAINING_RECORD(iface, IDirectMusicGraphImpl, dmobj.IDirectMusicObject_iface);
 }
+#endif
 
 static inline IDirectMusicGraphImpl *impl_from_IPersistStream(IPersistStream *iface)
 {
--- a/dlls/dmloader/container.c
+++ b/dlls/dmloader/container.c
@@ -193,11 +193,13 @@ static const IDirectMusicContainerVtbl d
     IDirectMusicContainerImpl_EnumObject
 };
 
+#ifndef __aarch64__
 /* IDirectMusicObject part: */
 static inline IDirectMusicContainerImpl *impl_from_IDirectMusicObject(IDirectMusicObject *iface)
 {
     return CONTAINING_RECORD(iface, IDirectMusicContainerImpl, dmobj.IDirectMusicObject_iface);
 }
+#endif
 
 static HRESULT WINAPI cont_IDirectMusicObject_ParseDescriptor(IDirectMusicObject *iface,
         IStream *stream, DMUS_OBJECTDESC *desc)
--- a/dlls/dmusic/collection.c
+++ b/dlls/dmusic/collection.c
@@ -49,10 +49,12 @@ static inline IDirectMusicCollectionImpl
     return CONTAINING_RECORD(iface, IDirectMusicCollectionImpl, IDirectMusicCollection_iface);
 }
 
+#ifndef __aarch64__
 static inline struct dmobject *impl_from_IDirectMusicObject(IDirectMusicObject *iface)
 {
     return CONTAINING_RECORD(iface, struct dmobject, IDirectMusicObject_iface);
 }
+#endif
 
 static inline IDirectMusicCollectionImpl *impl_from_IPersistStream(IPersistStream *iface)
 {
--- a/dlls/dmstyle/style.c
+++ b/dlls/dmstyle/style.c
@@ -206,11 +206,13 @@ static const IDirectMusicStyle8Vtbl dmst
     IDirectMusicStyle8Impl_EnumPattern
 };
 
+#ifndef __aarch64__
 /* IDirectMusicStyle8Impl IDirectMusicObject part: */
 static inline IDirectMusicStyle8Impl *impl_from_IDirectMusicObject(IDirectMusicObject *iface)
 {
     return CONTAINING_RECORD(iface, IDirectMusicStyle8Impl, dmobj.IDirectMusicObject_iface);
 }
+#endif
 
 static HRESULT WINAPI style_IDirectMusicObject_ParseDescriptor(IDirectMusicObject *iface,
         IStream *stream, DMUS_OBJECTDESC *desc)
--- a/dlls/dwrite/font.c
+++ b/dlls/dwrite/font.c
@@ -5101,10 +5101,12 @@ static HRESULT WINAPI glyphrunanalysis_G
     return S_OK;
 }
 
+#ifndef __aarch64__
 static inline int get_dib_stride( int width, int bpp )
 {
     return ((width * bpp + 31) >> 3) & ~3;
 }
+#endif
 
 static inline BYTE *get_pixel_ptr(BYTE *ptr, DWRITE_TEXTURE_TYPE type, const RECT *runbounds, const RECT *bounds)
 {
--- a/dlls/oleaut32/tmarshal.c
+++ b/dlls/oleaut32/tmarshal.c
@@ -1411,6 +1411,7 @@ static HRESULT get_funcdesc(ITypeInfo *t
     return S_OK;
 }
 
+#ifndef __aarch64__
 static inline BOOL is_in_elem(const ELEMDESC *elem)
 {
     return (elem->u.paramdesc.wParamFlags & PARAMFLAG_FIN || !elem->u.paramdesc.wParamFlags);
@@ -1420,6 +1421,7 @@ static inline BOOL is_out_elem(const ELE
 {
     return (elem->u.paramdesc.wParamFlags & PARAMFLAG_FOUT || !elem->u.paramdesc.wParamFlags);
 }
+#endif
 
 #ifdef __i386__
 static DWORD WINAPI xCall(int method, void **args)
--- a/dlls/windowscodecs/converter.c
+++ b/dlls/windowscodecs/converter.c
@@ -80,12 +80,14 @@ typedef struct FormatConverter {
     CRITICAL_SECTION lock; /* must be held when initialized */
 } FormatConverter;
 
+#ifndef __aarch64__
 /* https://www.w3.org/Graphics/Color/srgb */
 static inline float from_sRGB_component(float f)
 {
     if (f <= 0.04045f) return f / 12.92f;
     return powf((f + 0.055f) / 1.055f, 2.4f);
 }
+#endif
 
 static inline float to_sRGB_component(float f)
 {

description: these arguments should not be const, fixes a gcc warning
author: Michael Gilbert <mgilbert@debian.org>

--- a/dlls/msdaps/row_server.idl
+++ b/dlls/msdaps/row_server.idl
@@ -94,7 +94,7 @@ typedef struct
 
     /* IRowset */
     HRESULT AddRefRows([in] DBCOUNTITEM cRows,
-                       [in, size_is((ULONG)cRows)] const HROW rghRows[],
+                       [in, size_is((ULONG)cRows)] HROW rghRows[],
                        [out, size_is((ULONG)cRows)] DBREFCOUNT rgRefCounts[],
                        [out, size_is((ULONG)cRows)] DBROWSTATUS rgRowStatus[]);
 
@@ -110,7 +110,7 @@ typedef struct
                         [out, size_is(,(ULONG)cRows)] HROW **prghRows);
 
     HRESULT ReleaseRows([in] DBCOUNTITEM cRows,
-                        [in, size_is((ULONG)cRows)] const HROW rghRows[],
+                        [in, size_is((ULONG)cRows)] HROW rghRows[],
                         [in, size_is((ULONG)cRows)] DBROWOPTIONS rgRowOptions[],
                         [out, size_is((ULONG)cRows)] DBREFCOUNT rgRefCounts[],
                         [out, size_is((ULONG)cRows)] DBROWSTATUS rgRowStatus[]);
@@ -137,15 +137,15 @@ typedef struct
 
     HRESULT GetRowsByBookmark([in] HCHAPTER hReserved,
                               [in] DBCOUNTITEM cRows,
-                              [in, size_is((ULONG)cRows)] const DBBKMARK rgcbBookmarks[],
-                              [in, size_is((ULONG)cRows)] const BYTE *rgpBookmarks[],
+                              [in, size_is((ULONG)cRows)] DBBKMARK rgcbBookmarks[],
+                              [in, size_is((ULONG)cRows)] BYTE *rgpBookmarks[],
                               [out, size_is((ULONG)cRows)] HROW rghRows[],
                               [out, size_is((ULONG)cRows)] DBROWSTATUS rgRowStatus[]);
 
     HRESULT Hash([in] HCHAPTER hReserved,
                  [in] DBBKMARK cBookmarks,
-                 [in, size_is((ULONG)cBookmarks)] const DBBKMARK rgcbBookmarks[],
-                 [in, size_is((ULONG)cBookmarks)] const BYTE *rgpBookmarks[],
+                 [in, size_is((ULONG)cBookmarks)] DBBKMARK rgcbBookmarks[],
+                 [in, size_is((ULONG)cBookmarks)] BYTE *rgpBookmarks[],
                  [out, size_is((ULONG)cBookmarks)] DBHASHVALUE rgHashedValues[],
                  [out, size_is((ULONG)cBookmarks)] DBROWSTATUS rgBookmarkStatus[]);
 
--- a/dlls/msdaps/row_server.c
+++ b/dlls/msdaps/row_server.c
@@ -308,7 +308,7 @@ static HRESULT WINAPI server_SetColumns(
 }
 
 static HRESULT WINAPI server_AddRefRows(IWineRowServer* iface, DBCOUNTITEM cRows,
-                                        const HROW rghRows[], DBREFCOUNT rgRefCounts[],
+                                        HROW rghRows[], DBREFCOUNT rgRefCounts[],
                                         DBROWSTATUS rgRowStatus[])
 {
     server *This = impl_from_IWineRowServer(iface);
@@ -366,7 +366,7 @@ static HRESULT WINAPI server_GetNextRows
     return hr;
 }
 
-static HRESULT WINAPI server_ReleaseRows(IWineRowServer* iface, DBCOUNTITEM cRows, const HROW rghRows[],
+static HRESULT WINAPI server_ReleaseRows(IWineRowServer* iface, DBCOUNTITEM cRows, HROW rghRows[],
                                          DBROWOPTIONS rgRowOptions[], DBREFCOUNT rgRefCounts[], DBROWSTATUS rgRowStatus[])
 {
     server *This = impl_from_IWineRowServer(iface);
@@ -426,7 +426,7 @@ static HRESULT WINAPI server_GetRowsAt(I
 }
 
 static HRESULT WINAPI server_GetRowsByBookmark(IWineRowServer *iface, HCHAPTER hReserved, DBCOUNTITEM cRows,
-                                               const DBBKMARK rgcbBookmarks[], const BYTE * rgpBookmarks[],
+                                               DBBKMARK rgcbBookmarks[], BYTE * rgpBookmarks[],
                                                HROW rghRows[], DBROWSTATUS rgRowStatus[])
 {
     server *This = impl_from_IWineRowServer(iface);
@@ -435,7 +435,7 @@ static HRESULT WINAPI server_GetRowsByBo
 }
 
 static HRESULT WINAPI server_Hash(IWineRowServer *iface, HCHAPTER hReserved, DBBKMARK cBookmarks,
-                                  const DBBKMARK rgcbBookmarks[], const BYTE * rgpBookmarks[],
+                                  DBBKMARK rgcbBookmarks[], BYTE * rgpBookmarks[],
                                   DBHASHVALUE rgHashedValues[], DBROWSTATUS rgBookmarkStatus[])
 {
     server *This = impl_from_IWineRowServer(iface);
@@ -922,7 +922,7 @@ static ULONG WINAPI rowsetlocate_Release
     return ref;
 }
 
-static HRESULT WINAPI rowsetlocate_AddRefRows(IRowsetLocate *iface, DBCOUNTITEM cRows, const HROW rghRows[],
+static HRESULT WINAPI rowsetlocate_AddRefRows(IRowsetLocate *iface, DBCOUNTITEM cRows, HROW rghRows[],
                                               DBREFCOUNT rgRefCounts[], DBROWSTATUS rgRowStatus[])
 {
     rowset_proxy *This = impl_from_IRowsetLocate(iface);
@@ -1006,7 +1006,7 @@ static HRESULT WINAPI rowsetlocate_GetNe
     return hr;
 }
 
-static HRESULT WINAPI rowsetlocate_ReleaseRows(IRowsetLocate *iface, DBCOUNTITEM cRows, const HROW rghRows[],
+static HRESULT WINAPI rowsetlocate_ReleaseRows(IRowsetLocate *iface, DBCOUNTITEM cRows, HROW rghRows[],
                                                DBROWOPTIONS rgRowOptions[], DBREFCOUNT rgRefCounts[], DBROWSTATUS rgRowStatus[])
 {
     rowset_proxy *This = impl_from_IRowsetLocate(iface);
--- a/include/rstbas.idl
+++ b/include/rstbas.idl
@@ -31,7 +31,7 @@ interface IRowset : IUnknown
     typedef DWORD DBROWOPTIONS;
 
     HRESULT AddRefRows([in] DBCOUNTITEM cRows,
-                       [in, size_is(cRows)] const HROW rghRows[],
+                       [in, size_is(cRows)] HROW rghRows[],
                        [out, size_is(cRows)] DBREFCOUNT rgRefCounts[],
                        [out, size_is(cRows)] DBROWSTATUS rgRowStatus[]);
 
@@ -46,7 +46,7 @@ interface IRowset : IUnknown
                         [out, size_is(,cRows)] HROW **prghRows);
 
     HRESULT ReleaseRows([in] DBCOUNTITEM cRows,
-                        [in, size_is(cRows)] const HROW rghRows[],
+                        [in, size_is(cRows)] HROW rghRows[],
                         [in, size_is(cRows)] DBROWOPTIONS rgRowOptions[],
                         [out, size_is(cRows)] DBREFCOUNT rgRefCounts[],
                         [out, size_is(cRows)] DBROWSTATUS rgRowStatus[]);

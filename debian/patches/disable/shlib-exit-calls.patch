description: use abort instead of exit for shared library failure modes
author: Michael Gilbert <mgilbert@debian.org>

--- a/libs/wine/mmap.c
+++ b/libs/wine/mmap.c
@@ -76,7 +76,7 @@ static inline int get_fdzero(void)
         if ((fd = open( "/dev/zero", O_RDONLY )) == -1)
         {
             perror( "/dev/zero: open" );
-            exit(1);
+            abort();
         }
     }
     return fd;
@@ -128,7 +128,7 @@ static int try_mmap_fixed (void *addr, s
     if ( (pid = vfork()) == -1 )
     {
         perror("try_mmap_fixed: vfork");
-        exit(1);
+        abort();
     }
     if ( pid == 0 )
     {
@@ -140,18 +140,18 @@ static int try_mmap_fixed (void *addr, s
            mapped and we must fail. */
         for ( i = 0; i < len; i += pagesize )
             if ( mincore( (caddr_t)addr + i, pagesize, &vec ) != -1 )
-               _exit(1);
+                abort();
 
         /* Perform the mapping with MAP_FIXED set.  This is safe
            now, as none of the pages is currently in use. */
         result = mmap( addr, len, prot, flags | MAP_FIXED, fildes, off );
         if ( result == addr )
-            _exit(0);
+            break;
 
         if ( result != (void *) -1 ) /* This should never happen ... */
             munmap( result, len );
 
-       _exit(1);
+        abort();
     }
 
     /* reap child */
--- a/libs/wine/ldt.c
+++ b/libs/wine/ldt.c
@@ -192,7 +192,7 @@ static int internal_set_entry( unsigned
         {
             perror("i386_set_ldt");
             fprintf( stderr, "Did you reconfigure the kernel with \"options USER_LDT\"?\n" );
-            exit(1);
+            abort();
         }
     }
 #elif defined(__svr4__) || defined(_SCO_DS)
@@ -213,7 +213,7 @@ static int internal_set_entry( unsigned
         perror("i386_set_ldt");
 #else
     fprintf( stderr, "No LDT support on this platform\n" );
-    exit(1);
+    abort();
 #endif
 
     if (ret >= 0)
--- a/libs/wine/config.c
+++ b/libs/wine/config.c
@@ -68,7 +68,7 @@ static void fatal_error( const char *err
     fprintf( stderr, "wine: " );
     vfprintf( stderr, err, args );
     va_end( args );
-    exit(1);
+    abort();
 }
 
 /* die on a fatal error */
@@ -81,7 +81,7 @@ static void fatal_perror( const char *er
     vfprintf( stderr, err, args );
     perror( " " );
     va_end( args );
-    exit(1);
+    abort();
 }
 
 /* malloc wrapper */
--- a/libs/wine/debug.c
+++ b/libs/wine/debug.c
@@ -186,7 +186,7 @@ static void debug_usage(void)
         "    turns on all messages except warning heap messages\n"
         "Available message classes: err, warn, fixme, trace\n";
     write( 2, usage, sizeof(usage) - 1 );
-    exit(1);
+    abort();
 }
 
 
--- a/libs/wpp/preproc.c
+++ b/libs/wpp/preproc.c
@@ -711,7 +711,7 @@ end:
 static void wpp_default_error(const char *file, int line, int col, const char *near, const char *msg, va_list ap)
 {
 	generic_msg(msg, "Error", near, ap);
-	exit(1);
+	abort();
 }
 
 static void wpp_default_warning(const char *file, int line, int col, const char *near, const char *msg, va_list ap)
@@ -759,5 +759,5 @@ void pp_internal_error(const char *file,
 	vfprintf(stderr, s, ap);
 	fprintf(stderr, "\n");
 	va_end(ap);
-	exit(3);
+	abort();
 }
--- a/libs/port/spawn.c
+++ b/libs/port/spawn.c
@@ -55,20 +55,20 @@ int _spawnvp(int mode, const char *cmdna
         if (mode == _P_DETACH)
         {
             pid = fork();
-            if (pid == -1) _exit(1);
-            else if (pid > 0) _exit(0);
+            if (pid == -1) abort();
+            else if (pid > 0) return pid;
             /* else in grandchild */
         }
 
         signal( SIGPIPE, SIG_DFL );
         execvp(cmdname, (char **)argv);
-        _exit(1);
+        abort();
     }
 
     if (pid == -1)
         return -1;
 
-    if (mode == _P_OVERLAY) exit(0);
+    if (mode == _P_OVERLAY) abort();
 
     if (mode == _P_WAIT || mode == _P_DETACH)
     {

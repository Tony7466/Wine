description: regenerate vulkan files
author: Michael Gilbert <mgilbert@debian.org>

--- a/dlls/winevulkan/make_vulkan
+++ b/dlls/winevulkan/make_vulkan
@@ -253,7 +253,10 @@ class VkBaseType(object):
     def definition(self):
         # Definition is similar for alias or non-alias as type
         # is already set to alias.
-        return "typedef {0} {1};\n".format(self.type, self.name)
+        if not self.type is None:
+            return "typedef {0} {1};\n".format(self.type, self.name)
+        else:
+            return "struct {0};\n".format(self.name)
 
     def is_alias(self):
         return bool(self.alias)
@@ -392,7 +395,9 @@ class VkEnum(object):
             if not value.is_alias() and v.value == value.value:
                 LOGGER.debug("Adding duplicate enum value {0} to {1}".format(v, self.name))
                 return
-        self.values.append(value)
+        # Avoid adding duplicate aliases multiple times
+        if not any(x.name == value.name for x in self.values):
+            self.values.append(value)
 
     def definition(self):
         if self.is_alias():
@@ -1027,7 +1032,7 @@ class VkMember(object):
         if self.needs_conversion():
             if self.is_dynamic_array():
                 if direction == Direction.OUTPUT:
-                    LOGGER.warn("TODO: implement copying of returnedonly dynamic array for {0}.{1}".format(self.type, self.name))
+                    LOGGER.warning("TODO: implement copying of returnedonly dynamic array for {0}.{1}".format(self.type, self.name))
                 else:
                     # Array length is either a variable name (string) or an int.
                     count = self.dyn_array_len if isinstance(self.dyn_array_len, int) else "{0}{1}".format(input, self.dyn_array_len)
@@ -1039,7 +1044,7 @@ class VkMember(object):
                     return "convert_{0}_static_array_host_to_win({2}{1}, {3}{1}, {4});\n".format(self.type, self.name, input, output, count)
                 else:
                     # Nothing needed this yet.
-                    LOGGER.warn("TODO: implement copying of static array for {0}.{1}".format(self.type, self.name))
+                    LOGGER.warning("TODO: implement copying of static array for {0}.{1}".format(self.type, self.name))
             else:
                 if direction == Direction.OUTPUT:
                     return "convert_{0}_host_to_win(&{2}{1}, &{3}{1});\n".format(self.type, self.name, input, output)
@@ -1255,7 +1260,7 @@ class VkParam(object):
         # Since we have parsed all types before hand, this should not happen.
         type_info = types.get(type_elem.text, None)
         if type_info is None:
-            LOGGER.err("type info not found for: {0}".format(type_elem.text))
+            LOGGER.error("type info not found for: {0}".format(type_elem.text))
 
         return VkParam(type_info, const=const, pointer=pointer, name=name, array_len=array_len, dyn_array_len=dyn_array_len)
 
@@ -1351,7 +1356,7 @@ class VkParam(object):
                 # Don't care about Linux specific types.
                 self.format_str = ""
             else:
-                LOGGER.warn("Unhandled type: {0}".format(self.type_info))
+                LOGGER.warning("Unhandled type: {0}".format(self.type_info))
 
     def copy(self, direction):
         if direction == Direction.INPUT:
@@ -2117,7 +2122,9 @@ class VkGenerator(object):
 
     def _generate_copyright(self, f, spec_file=False):
         f.write("# " if spec_file else "/* ")
-        f.write("Automatically generated from Vulkan vk.xml; DO NOT EDIT!\n")
+        f.write("Automatically generated from ")
+        f.write(self.registry._filename)
+        f.write("; DO NOT EDIT!\n")
         lines = ["", "This file is generated from Vulkan vk.xml file covered",
             "by the following copyright and permission notice:"]
         lines.extend([l.rstrip(" ") for l in self.registry.copyright.splitlines()])
@@ -2560,6 +2567,7 @@ class VkRegistry(object):
         self.funcpointers = None
         self.handles = None
         self.structs = None
+        self._filename = reg_filename
 
         # We aggregate all types in here for cross-referencing.
         self.funcs = {}
@@ -2953,7 +2961,9 @@ class VkRegistry(object):
 
             if type_info["category"] == "basetype":
                 name = t.find("name").text
-                _type = t.find("type").text
+                _type = None
+                if not t.find("type") is None:
+                    _type = t.find("type").text
                 basetype = VkBaseType(name, _type)
                 base_types.append(basetype)
                 type_info["data"] = basetype
@@ -3098,11 +3108,6 @@ def set_working_directory():
     path = os.path.dirname(path)
     os.chdir(path)
 
-def download_vk_xml(filename):
-    url = "https://raw.github.com/KhronosGroup/Vulkan-Docs/v{0}/xml/vk.xml".format(VK_XML_VERSION)
-    if not os.path.isfile(filename):
-        urllib.request.urlretrieve(url, filename)
-
 def main():
     parser = argparse.ArgumentParser()
     parser.add_argument("-v", "--verbose", action="count", default=0, help="increase output verbosity")
@@ -3117,8 +3122,7 @@ def main():
 
     set_working_directory()
 
-    vk_xml = "vk-{0}.xml".format(VK_XML_VERSION)
-    download_vk_xml(vk_xml)
+    vk_xml = "/usr/share/vulkan/registry/vk.xml"
     registry = VkRegistry(vk_xml)
     generator = VkGenerator(registry)
 
--- a/dlls/wined3d/utils.c
+++ b/dlls/wined3d/utils.c
@@ -5342,9 +5342,9 @@ const char *wined3d_debug_vkresult(VkRes
     switch (vr)
     {
 #define WINED3D_TO_STR(x) case x: return #x
-        WINED3D_TO_STR(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR);
+        WINED3D_TO_STR(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS);
         WINED3D_TO_STR(VK_ERROR_NOT_PERMITTED_EXT);
-        WINED3D_TO_STR(VK_ERROR_FRAGMENTATION_EXT);
+        WINED3D_TO_STR(VK_ERROR_FRAGMENTATION);
         WINED3D_TO_STR(VK_ERROR_INVALID_EXTERNAL_HANDLE);
         WINED3D_TO_STR(VK_ERROR_OUT_OF_POOL_MEMORY);
         WINED3D_TO_STR(VK_ERROR_INVALID_SHADER_NV);

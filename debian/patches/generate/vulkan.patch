description: regenerate vulkan files
author: Michael Gilbert <mgilbert@debian.org>

--- a/dlls/winevulkan/make_vulkan
+++ b/dlls/winevulkan/make_vulkan
@@ -1230,7 +1230,7 @@ class VkMember(object):
         if (conv and self.needs_conversion()) or self.needs_unwrapping():
             if self.is_dynamic_array():
                 if direction == Direction.OUTPUT:
-                    LOGGER.warn("TODO: implement copying of returnedonly dynamic array for {0}.{1}".format(self.type, self.name))
+                    LOGGER.warning("TODO: implement copying of returnedonly dynamic array for {0}.{1}".format(self.type, self.name))
                 else:
                     # Array length is either a variable name (string) or an int.
                     count = self.dyn_array_len if isinstance(self.dyn_array_len, int) else "{0}{1}".format(input, self.dyn_array_len)
@@ -1242,7 +1242,7 @@ class VkMember(object):
                     return "convert_{0}_static_array_host_to_win({2}{1}, {3}{1}, {4});\n".format(self.type, self.name, input, output, count)
                 else:
                     # Nothing needed this yet.
-                    LOGGER.warn("TODO: implement copying of static array for {0}.{1}".format(self.type, self.name))
+                    LOGGER.warning("TODO: implement copying of static array for {0}.{1}".format(self.type, self.name))
             elif self.is_handle() and self.needs_unwrapping():
                 if direction == Direction.OUTPUT:
                     LOGGER.err("OUTPUT parameter {0}.{1} cannot be unwrapped".format(self.type, self.name))
@@ -1535,7 +1535,7 @@ class VkParam(object):
         # Since we have parsed all types before hand, this should not happen.
         type_info = types.get(type_elem.text, None)
         if type_info is None:
-            LOGGER.err("type info not found for: {0}".format(type_elem.text))
+            LOGGER.error("type info not found for: {0}".format(type_elem.text))
 
         return VkParam(type_info, const=const, pointer=pointer, name=name, array_len=array_len, dyn_array_len=dyn_array_len, object_type=object_type)
 
@@ -1640,7 +1640,7 @@ class VkParam(object):
                 # Don't care about specific types for non-Windows platforms.
                 self.format_str = ""
             else:
-                LOGGER.warn("Unhandled type: {0}".format(self.type_info))
+                LOGGER.warning("Unhandled type: {0}".format(self.type_info))
 
     def copy(self, direction, prefix=""):
         if direction == Direction.INPUT:
@@ -2177,7 +2177,7 @@ class ConversionFunction(object):
         elif isinstance(self.operand, VkHandle) and self.direction == Direction.INPUT:
             body += "        out[i] = " + self.operand.driver_handle("in[i]") + ";\n"
         else:
-            LOGGER.warn("Unhandled conversion operand type")
+            LOGGER.warning("Unhandled conversion operand type")
             body += "        out[i] = in[i];\n"
 
         body += "    }\n\n"
@@ -2319,7 +2319,7 @@ class ConversionFunction(object):
         elif isinstance(self.operand, VkHandle) and self.direction == Direction.INPUT:
             body += "        out[i] = " + self.operand.driver_handle("in[i]") + ";\n"
         else:
-            LOGGER.warn("Unhandled conversion operand type")
+            LOGGER.warning("Unhandled conversion operand type")
             body += "        out[i] = in[i];\n"
 
         body += "    }\n"
@@ -2705,7 +2705,9 @@ class VkGenerator(object):
 
     def _generate_copyright(self, f, spec_file=False):
         f.write("# " if spec_file else "/* ")
-        f.write("Automatically generated from Vulkan vk.xml; DO NOT EDIT!\n")
+        f.write("Automatically generated from ")
+        f.write(self.registry._filename)
+        f.write("; DO NOT EDIT!\n")
         lines = ["", "This file is generated from Vulkan vk.xml file covered",
             "by the following copyright and permission notice:"]
         lines.extend([l.rstrip(" ") for l in self.registry.copyright.splitlines()])
@@ -3272,6 +3274,7 @@ class VkRegistry(object):
         self.funcpointers = None
         self.handles = None
         self.structs = None
+        self._filename = reg_filename
 
         # We aggregate all types in here for cross-referencing.
         self.funcs = {}
@@ -3854,11 +3857,6 @@ def set_working_directory():
     path = os.path.dirname(path)
     os.chdir(path)
 
-def download_vk_xml(filename):
-    url = "https://raw.githubusercontent.com/KhronosGroup/Vulkan-Docs/v{0}/xml/vk.xml".format(VK_XML_VERSION)
-    if not os.path.isfile(filename):
-        urllib.request.urlretrieve(url, filename)
-
 def main():
     parser = argparse.ArgumentParser()
     parser.add_argument("-v", "--verbose", action="count", default=0, help="increase output verbosity")
@@ -3878,7 +3876,6 @@ def main():
         vk_xml = args.xml
     else:
         vk_xml = "vk-{0}.xml".format(VK_XML_VERSION)
-        download_vk_xml(vk_xml)
 
     registry = VkRegistry(vk_xml)
     generator = VkGenerator(registry)
--- a/dlls/wined3d/utils.c
+++ b/dlls/wined3d/utils.c
@@ -5498,9 +5498,9 @@ const char *wined3d_debug_vkresult(VkRes
     switch (vr)
     {
 #define WINED3D_TO_STR(x) case x: return #x
-        WINED3D_TO_STR(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR);
+        WINED3D_TO_STR(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS);
         WINED3D_TO_STR(VK_ERROR_NOT_PERMITTED_EXT);
-        WINED3D_TO_STR(VK_ERROR_FRAGMENTATION_EXT);
+        WINED3D_TO_STR(VK_ERROR_FRAGMENTATION);
         WINED3D_TO_STR(VK_ERROR_INVALID_EXTERNAL_HANDLE);
         WINED3D_TO_STR(VK_ERROR_OUT_OF_POOL_MEMORY);
         WINED3D_TO_STR(VK_ERROR_INVALID_SHADER_NV);
--- a/dlls/wined3d/adapter_vk.c
+++ b/dlls/wined3d/adapter_vk.c
@@ -2339,7 +2339,7 @@ static bool wined3d_adapter_vk_init_devi
     {
         {VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME,          ~0u},
         {VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME,    ~0u,                true},
-        {VK_KHR_MAINTENANCE1_EXTENSION_NAME,                VK_API_VERSION_1_1, true},
+        {VK_KHR_MAINTENANCE_1_EXTENSION_NAME,               VK_API_VERSION_1_1, true},
         {VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME,VK_API_VERSION_1_2},
         {VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME,      VK_API_VERSION_1_1, true},
         {VK_KHR_SWAPCHAIN_EXTENSION_NAME,                   ~0u,                true},
